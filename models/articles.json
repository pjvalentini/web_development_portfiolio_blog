[
  {
    "id": 1510801480849,
    "title": "Coding in Aviation",
    "image": "https:&#x2F;&#x2F;drscdn.500px.org&#x2F;photo&#x2F;109607499&#x2F;m%3D900&#x2F;v2?webp=true&amp;sig=feb1de269343e8fe404b738540fb3fc13cf732df14a81835b808b1a8f651e0f6",
    "body": "Here’s a good question: who’s flying the plane, the pilot or the autopilot? Although it can’t be known exactly when the pilot is going to switch to autopilot, it can be assumed he will during the flight. But, even if he didn’t use the autopilot, human and machine are still working together to navigate through the clouds because computer-assisted flight systems are as integral to flying as a trained pilot is.\r\n\r\nElectronic Control Systems\r\n\r\nIn order to build a computer capable of flying an airplane, an intense amount of coding needs to be done. Autopilots must be able to detect objects in the flight path, follow the flight route, and in some cases land the aircraft. This is done using the Electronic Control System (ECS), which is embedded in the cock pit.\r\n\r\nElectronics Tutorials defines ECSs as the “physical interconnection of components, or parts, that gathers various amounts of information together with the aid of input devices such as sensors, responds in some way to this information and then uses electrical energy in the form of an output action to control a physical process or perform some type of mathematical operation on the signal.”\r\n\r\nThe high-tech coding that transforms one signal into another keeps millions of fliers safe every single day. Autopilot isn’t just a single application, but rather the entire ECS working to keep everyone safe and it begins with something as simple yet critical as an industrial PC board or computer-on-module platform, and grows to initiate and respond to a myriad of commands, as well as enact emergency safety precautions. It that makes you nervous, it shouldn’t. Human error is more likely than computer error, and yet with a human in the cockpit, you’re provided an extra level of security.\r\n\r\nRecreating it as Practice\r\n\r\nFancy trying your hand building a cockpit? If you know coding and you can handle the peripherals, you could simulate the cockpit at home. Understand that unless you have millions of dollars, this won’t be a too-scale cockpit. Instead, it will be more RC-size than Boeing-size.\r\n\r\nYou’ll need a transmitter, a receiver, an electronic speed controller (ESC), a battery, motor, and a servos. You connect the pieces to build a small scale model airplane, which can be flown using the transmitter. For full detailed instructions, check out the guide on Instructables.com.\r\n\r\nJobs for Coders in the Aviation Industry\r\n\r\nIf coding and aviation are more than a hobby to you, you may want to consider getting a job in the field. There are a number of jobs that would be desirable to competent coders. Here’s is a sampling of those jobs:\r\n\r\n• Avionics Technician – Handles electronic maintenance and repair. It’s the responsibility of the technician to run cabling, mount antennas, and make navigation and engine monitoring connections.\r\n• System Trouble-shooters – Diagnoses and remedies issues. It is important trouble-shooting be done quickly and efficiently, so pilots can get their aircraft back in the sky.\r\n\r\n• Bench Technicians – Works on navigation and communication devices, such as radios, autopilots, and computers. Job requires advanced skills.\r\nAmerica is considered the industry leader in commercial airline safety. Although the rules regarding a pilot’s conduct and training are strict, it’s not just the pilots that have helped the country achieve this safety recognition. It’s also due to the airplane’s advanced components. Inside every American commercial aircraft, there is an ECS designed with safety in mind. Above all else, the most important thing is the safety of the humans onboard. So, next time you’re concerned about the autopilot, don’t be. It exists, so the place stays safe.\r\n\r\nWritten by Jane Brown",
    "description": "Here’s a good question: who’s flying the plane, the pilot or the autopilot? Although it can’t be known exactly when the pilot is going to switch to autopilot, it can be assumed he will during the flig"
  },
  {
    "id": 1510801751368,
    "title": "Learning the ropes of coding",
    "image": "http:&#x2F;&#x2F;cdn.skilledup.com&#x2F;wp-content&#x2F;uploads&#x2F;2015&#x2F;06&#x2F;young-people-learning-to-code-Feature_1290x688_KL.jpg",
    "body": "Programming is one of the most valuable skills you can pick up in these modern times, whether for career prospects or to stretch your brain and create something awesome. If you're just getting started on your coding journey, here are ten tips and resources to set you off on the right foot.\r\n\r\nThe direction you go in will depend in large part on why you want to learn to code in the first place and how much time you have to devote to learning. If you want to be a professional programmer, signing up college courses might be your best bet. (Google has a list of suggested skills and courses for would-be software engineers.) If you want to build websites or games for fun (and possibly profit) in your spare time, interactive tutorials might be better. Bloc has a comparison of course options based on workload, cost, and reason you're picking up programming. And if you're still deciding on a tech career, Switch will recommend one based on your interests.\r\n\r\nThere's no one \"best\" programming language, and once you've learned one, it's fairly easy to pick up another, so don't get hung too up on choosing your first language. That said, some languages are more beginner-friendly than others. The language you choose to start with might depend, again, on your purpose. (For example, if you want to write an iOS app, you'll need to learn Swift.) There's a case for starting with C if you're serious about programming, although higher-level languages, like Python, are easier to jump into right away. Here's an infographic comparing a few popular programming languages.\r\n\r\nNo matter which language or learning method you choose, you should start at the very beginning (a very good place to start). When David Sinsky taught himself to code in eight weeks, for example, he spent one weekend getting an introductory grasp of Python and one weekend getting an introductory understanding of Django—going through the tutorial, deleting all of the tutorial code, and working through the tutorial again from scratch. Start with the basics and be patient with yourself as you progress. To take your first coding project from start to finish, break down the project into simple steps. And if one method of learning isn't working for you (e.g., books), try another method before giving up.\r\n\r\nEven toddlers are learning to code these days. That's actually a great thing for all of us. Although many of the programs designed to teach kids to code are very simplistic, many of them, like Scratch, are suitable for all ages. It doesn't matter how old you are; even kids' animation apps can get you started with the basics of programming (edX has a new course on Programming in Scratch, by the way).\r\n\r\nWritten by \r\nMelanie Pinola",
    "description": "Programming is one of the most valuable skills you can pick up in these modern times, whether for career prospects or to stretch your brain and create something awesome. If you're just getting started"
  },
  {
    "id": 1510802002520,
    "title": "Bootstrap 101",
    "image": "https:&#x2F;&#x2F;spin.atomicobject.com&#x2F;wp-content&#x2F;uploads&#x2F;col-xl.jpg",
    "body": "Want to save time on development? Want to learn the basics of a great foundation? In this article, I’ll briefly introduce you to Bootstrap and provide you with additional resources so you can learn more about it.\r\n\r\nCheck out our new Ultimate Guide To Bootstrap Resources\r\n\r\nBootstrap was initially developed by Twitter engineers, and here’s how they describe/define it:\r\n\r\nBootstrap is a front-end toolkit for rapidly developing web applications. It is a collection of CSS and HTML conventions. It uses some of the latest browser techniques to provide you with stylish typography, forms, buttons, tables, grids, navigation and everything else you need in a super tiny (only 6k with gzip) resource.\r\n\r\nYou can download just the Bootstrap core files: one folder with CSS, one with fonts, and one with javascript; Or download Bootstrap plus the source files. When you download the source you get all of Bootstrap and more, including sample html files with their respective CSS for different web elements, like navigation bars, a carousel, grids, footers etc.\r\n\r\nGetting Started\r\n\r\nIf you download Bootstrap’s source files, in addition to the html sample pages and CSS files, you’ll also get access to the LESS files (more below) and the javascript files.\r\n\r\nThe javascript files are the plugins that give your site dynamic behaviors, such as transitions, alerts, popovers. You can pick and choose from a variety of individual javascript elements from Bootstrap or you can use the Bootstrap core javascript file bootstrap.js. (Note that Bootstrap plugins require jQuery.)\r\n\r\nHere’s a sample of the Bootstrap javascript/jQuery carousel template:\r\n\r\nBootstrap carousel template\r\nBootstrap javascript/jQuery carousel template\r\nGetting More with LESS\r\n\r\nThe LESS files are part of what makes Bootstrap so powerful. It adds additional dynamic functionality to the CSS with variables, mixins, operations and functions. To find out more about LESS, visit www.lesscss.org or the LESS Github page.\r\n\r\nYou can play around and modify almost anything in Bootstrap, but you’ll want to avoid altering the core files that are shown in the first screenshot.\r\n\r\nBootstrap is entirely customizable but you have to be careful when customizing. You will want to keep whatever Bootstrap stylesheet you’re working with separate and intact and then create a new stylesheet for your own customized elements. Keeping Bootstrap’s files separate will make upgrading less of a headache.\r\n\r\nAll that being said, not all web projects will require all the files Bootstrap has to offer, so visit this handy Customizer Tool so you can choose and download which elements you need for your project. This gives you quick access to your own custom version of Bootstrap.\r\n\r\nResponsive Ready\r\n\r\nWith the release of the latest version of Bootstrap (Bootstrap 3), all files are now coded to allow for responsive design and meant to work with mobile devices and tablets.\r\n\r\nBecause Bootstrap is a responsive framework, as a designer/developer you must use the HTML5 doctype when coding, and remember to make your images responsive-friendly by adding the .img-responsive bootstrap class.\r\n\r\nIf you want to see Bootstrap in action, visit Karma WiFi and Scoutzie. Both of these sites were built with Bootstrap and are heavily customized.\r\n\r\nWritten by:\r\nPatricia Saravesi",
    "description": "Want to save time on development? Want to learn the basics of a great foundation? In this article, I’ll briefly introduce you to Bootstrap and provide you with additional resources so you can learn mo"
  },
  {
    "id": 1510802428462,
    "title": "Custom Event Emitters",
    "image": "http:&#x2F;&#x2F;ourcodeworld.com&#x2F;public-media&#x2F;articles&#x2F;articleocw-590879badb1b8.png",
    "body": "In this post I’ll attempt to summarise some patterns for designing event-based Javascript applications extracted from our projects and previous blog posts on the subject. I’ll end with an overview of the techniques described and how they play together in a real-world application. This post is a follow-up from a presentation at the London Javascript User Group.\r\n\r\nBackground\r\n\r\nWe’ve blogged about Javascript patterns for complex applications before. If you’re short on time, that post describes the way we lay out our client-side apps here at New Bamboo. It’s an MVC-like setup where we have Model objects doing the persistence and data binding, and View objects listening to state change in those models via the observer patterns and custom events. If you haven’t, I strongly recommend you read that post before this one.\r\n\r\nThe key component of this approach is using custom events to decouple the communication between layers. This is a simple View example *:\r\n\r\n* The examples in this page will use jQuery’s event triggering and DOM functions for simplicity.\r\nvar UserPane = function(event_source, $container){\r\n\r\n  function update(event, user){\r\n    $container.append('&lt;li&gt:'+user.name+'&lt;/li&gt:')\r\n  }\r\n\r\n  $(event_source).bind('user_added', update)\r\n}\r\nAnd you would use it like:\r\n\r\nnew UserPane(document, $('ul#user_list'));\r\n\r\n// Wrap DOM events and re-trigger with useful data using jQuery\r\n$('#users input:radio').change(function(evt){\r\n  $(document).trigger('user_added', {name: $(this).val()});\r\n});\r\nThe example defines a View class that knows in which DOM element to render content ($container) and binds itself to the ‘user_added’ event triggered on the document object by other layers in the application.\r\n\r\nWe’re passing the document element as the source of events, but you’re free to swap it by anything that you can bind to and trigger events from. It doesn’t even need to be a DOM element, and this is where OO and evented programming starts to look less counter-intuitive than one might have thought: you can build your own Event Emitters and model your domain around them.\r\n\r\nEvent Emitters In the wild\r\n\r\nThat is exactly what libraries such as Node.js are doing with an EventEmitter class you can extend from. The following is an object that emits a “tick” event with a random number every 5 seconds.\r\n\r\nvar EventEmitter = require('events').EventEmitter,\r\n    puts = require('sys').puts;\r\n\r\nvar Ticker = function( interval ){\r\n  var self = this,\r\n      nextTick = function(){\r\n    self.emit('tick', Math.random() * 1000);\r\n    setTimeout(nextTick, interval);\r\n  }\r\n\r\n  nextTick();\r\n};\r\n\r\n// Extend from EventEmitter 'addListener' and 'emit' methods\r\nTicker.prototype = new EventEmitter;\r\n\r\n// A ticker instance with an interval of 5 seconds\r\nvar ticktock = new Ticker( 5000 );\r\n\r\n// Bind an event handler to the 'tick' event\r\nticktock.addListener('tick', function( number ) {\r\n  puts('number emitted: '+ number);\r\n});\r\nThe nice thing about this is that objects interacting with the Ticker instance only need to bind themselves to events emitted by it. There’s no need for public methods apart from addListener (or $.bind in our previous jQuery example).\r\n\r\nHow we use Event Emitters\r\n\r\nBack in the browser side of things, you can build event emitters that represent objects in your domain and trigger events when their status changes. Then other parts of the application can observe those events and react accordingly. A nice abstraction of this pattern is js-model, an ORM-like Javascript library we developed to model domain objects with extra server persistence baked-in.\r\n\r\n// Js-model example\r\nvar Post = Model(\"post\")\r\n\r\nPost.bind(\"add\", function(new_post) {\r\n  addObjectIntoUI(new_post)\r\n})\r\n\r\n// This will trigger the 'add' event on the Post object,\r\n// executing any handlers observing it.\r\nvar post = new Post({ foo: \"bar\" })\r\nMore info on js-model on its documentation page.\r\n\r\nThis is also the approach that we’ve taken with our Pusher websockets service. With it you can bind your local objects to events coming from the server in a completely transparent way.\r\n\r\nvar server = new Pusher('you app key', 'some channel');\r\n\r\nserver.bind('user_added', function(user){\r\n  $('ul#user_list').append('&lt;li&gt:'+user.name+'&lt;/li&gt:')\r\n})\r\nAnd of course you would build your own objects to do the binding and keep your main app clean and expressive.\r\n\r\nnew UserPane( server, $('ul#user_list') );\r\nI talk about how this is done in this post.\r\n\r\nDo it yourself\r\n\r\nBecause Pusher.js is framework-agnostic, we don’t use jQuery’s event-binding API. Instead, Pusher implements its own bind method. But once you’re using this pattern in one part of your app there’s no reason you couldn’t use it for the rest of your domain objects. The only thing they need to do is implement binding and triggering of events. This is a simple abstract prototype you can use in your own objects. This is the Ticker example again using that snippet:\r\n\r\n/* Periodically send out dummy events\r\n--------------------------------------------*/\r\nvar Ticker = function( interval ){\r\n  var self = this,\r\n      nextTick = function(){\r\n    self.trigger('tick', Math.random() * 1000);\r\n    setTimeout(nextTick, interval);\r\n  }\r\n\r\n  nextTick();\r\n};\r\n\r\n// Extend from AbstractEventsDispatcher 'bind' and 'trigger' methods\r\nTicker.prototype = new AbstractEventsDispatcher;\r\n\r\nvar ticktock = new Ticker( 5000 );\r\n\r\nticktock.bind('tick', function( number ) {\r\n  puts('number emitted: '+ number);\r\n});\r\nThe only reason I’ve changed ‘addListener’ to ‘bind’ and ‘emit’ to ‘trigger’ is to keep it familiar for jQuery users.\r\n\r\nWhat’s important here is that once you model your objects around this minimal event-centric interface (‘bind’ and ‘trigger’) it makes little difference what your event emitter objects actually do -and how they do it. You app can be fully evented while retaining the best bits of object orientation such as polymorphism and inheritance.\r\n\r\nA working application\r\n\r\nI’ve recently built an activity dashboard app that uses Pusher when deployed to production but a mocked, in-browser event emitter object in development to simulate a stream of events coming from the server. My View objects are oblivious to the origin of those events and just focus on binding to them and rendering them onscreen as they come. You can see it working on the video above.\r\n\r\nIt starts by defining a series of self-contained widget objects. I then loop through them and instantiate each with the same instance of an event emitter -in this case Pusher or a mock server implementing bind for custom events.\r\n\r\nThis is the basic code:\r\n\r\nvar server = new MockServer() // or new Pusher('app_key', 'channel_name'), or your own event emitter\r\n\r\n// Instantiate widgets\r\nfor(widget in Widgets.available){\r\n  new widget( server );\r\n}\r\nAnd this is a simplified widget that listens to ‘closed_order’ events and plays a sound using HTML5’s audio tag:\r\n\r\nWidgets.available.soundAlert = function( server ){\r\n\r\n  // add audio files to document\r\n  var $audio = $('&lt;audio src=\"/audio/alert.mp3\" preload=\"true\" /&gt;').appendTo('body');\r\n\r\n  function play(data){\r\n    $audio.load().play();\r\n  }\r\n\r\n  // bind to events you want to alert\r\n  server.bind( 'order_closed', play )\r\n}\r\nI can add as many widgets as I want (and even remove them, pause them and inspect them in run-time), with no dependencies between them. Because they bind themselves to events they’re interested in, each one is completely orthogonal to the system.\r\n\r\nFinally, this is an example of the MockServer object I use to replace Pusher for development purposes:\r\n\r\n/* Periodically send out dummy events\r\n--------------------------------------------*/\r\nvar MockServer = function(){\r\n\r\n  var self = this, interval, event_names = ['order_closed', 'order_cancelled', 'order_shipped'];\r\n\r\n  function randomEvent(){\r\n    var event_name = event_names[Math.round(Math.random()*2)];\r\n\r\n    self.trigger(event_name, {\r\n      info: 'Mock order, 3 products',\r\n      total: Math.random() * 1000\r\n    });\r\n  }\r\n\r\n  interval = setInterval(randomEvent, 2000);\r\n};\r\n// Extend event-binding interface\r\nMockServer.prototype = new AbstractEventsDispatcher;\r\nWrap up\r\n\r\nThis illustrates the general architecture that permeates all recent Javascript projects that we’ve developed. In future articles we’ll talk about techniques and specific problems in more detail.\r\n\r\nEven though I’ve included an abstract class that I used for the examples on this page, the emphasis is on the patterns more than on particular implementations and APIs.\r\n\r\nArticle Written by : Ismael Celis",
    "description": "In this post I’ll attempt to summarise some patterns for designing event-based Javascript applications extracted from our projects and previous blog posts on the subject. I’ll end with an overview of "
  },
  {
    "id": 1510802646681,
    "title": "JavaScript Promises for Dummies",
    "image": "https:&#x2F;&#x2F;cdn.scotch.io&#x2F;1&#x2F;HOyDrBGjSKixRiNn9q0m_javascript-promises-for-dummies.jpg",
    "body": "Article Written by Jocylen Yeen\r\n\r\nJavascript Promises are not difficult. However, lots of people find it a little bit hard to understand at the beginning. Therefore, I would like to write down the way I understand promises, in a dummy way.\r\n\r\nRelated Course: Getting Started with JavaScript for Web Development\r\n# Understanding Promises\r\n\r\nA Promise in short:\r\n\r\n\"Imagine you are a kid. Your mom promises you that she'll get you a new phone next week.\"\r\n\r\nYou don't know if you will get that phone until next week. Your mom can either really buy you a brand new phone, or stand you up and withhold the phone if she is not happy :(.\r\n\r\nThat is a promise. A promise has 3 states. They are:\r\n\r\nPromise is pending: You don't know if you will get that phone until next week.\r\nPromise is resolved: Your mom really buy you a brand new phone.\r\nPromise is rejected: You don't get a new phone because your mom is not happy.\r\n# Creating a Promise\r\n\r\nLet's convert this to JavaScript.\r\n\r\n/* ES5 */\r\nvar isMomHappy = false;\r\n\r\n// Promise\r\nvar willIGetNewPhone = new Promise(\r\n    function (resolve, reject) {\r\n        if (isMomHappy) {\r\n            var phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone); // fulfilled\r\n        } else {\r\n            var reason = new Error('mom is not happy');\r\n            reject(reason); // reject\r\n        }\r\n\r\n    }\r\n);\r\nThe code is quite expressive in itself.\r\n\r\nWe have a boolean isMomHappy, to define if mom is happy.\r\nWe have a promise willIGetNewPhone. The promise can be either resolved (if mom get you a new phone) or rejected(mom is not happy, she doesn't buy you one).\r\nThere is a standard syntax to define a new Promise, refer to MDN documentation, a promise syntax look like this.\r\n// promise syntax look like this\r\nnew Promise(/* executor*/ function (resolve, reject) { ... } );\r\nWhat you need to remember is, when the result is successful, call resolve(your_success_value), if the result fails, call reject(your_fail_value) in your promise. In our example, if mom is happy, we will get a phone. Therefore, we call resolve function with phone variable. If mom is not happy, we will call reject function with a reason reject(reason);\r\n# Consuming Promises\r\n\r\nNow that we have the promise, let's consume it.\r\n\r\n/* ES5 */\r\n...\r\n\r\n// call our promise\r\nvar askMom = function () {\r\n    willIGetNewPhone\r\n        .then(function (fulfilled) {\r\n            // yay, you got a new phone\r\n            console.log(fulfilled);\r\n         // output: { brand: 'Samsung', color: 'black' }\r\n        })\r\n        .catch(function (error) {\r\n            // oops, mom don't buy it\r\n            console.log(error.message);\r\n         // output: 'mom is not happy'\r\n        });\r\n};\r\n\r\naskMom();\r\n\r\nHigh Quality JavaScript Tutorials\r\nThe best tutorials you'll find for using JavaScript on your site with our FREE video courses!\r\n\r\nEnter Your Email\r\nSIGN ME UP\r\n\r\nWe have a function call askMom. In this function, we will consume our promise willIGetNewPhone.\r\nWe want to take some action once the promise is resolved or rejected, we use .then and .catch to handle our action.\r\nIn our example, we have function(fulfilled) { ... } in .then. What is the value of fulfilled? The fulfilled value is exactly the value you pass in your promise resolve(your_success_value). Therefore, it will be phone in our case.\r\nWe have function(error){ ... } in .catch. What is the value of error? As you can guess, the error value is exactly the value you pass in your promise reject(your_fail_value). Therefore, it will be reason in our case.\r\nLet's run the example and see the result!\r\n\r\nDemo: https://jsbin.com/nifocu/1/edit?js,console Result\r\n\r\n# Chaining Promises\r\n\r\nPromises are chainable.\r\n\r\nLet's say, you, the kid, promise your friend that you will show them the new phone when your mom buy you one.\r\n\r\nThat is another promise. Let's write it!\r\n\r\n...\r\n\r\n// 2nd promise\r\nvar showOff = function (phone) {\r\n    return new Promise(\r\n        function (resolve, reject) {\r\n            var message = 'Hey friend, I have a new ' +\r\n                phone.color + ' ' + phone.brand + ' phone';\r\n\r\n            resolve(message);\r\n        }\r\n    );\r\n};\r\nNotes:\r\n\r\nIn this example, you might realize we didn't call the reject. It's optional.\r\nWe can shorten this sample like using Promise.resolve instead.\r\n\r\n// shorten it\r\n...\r\n\r\n// 2nd promise\r\nvar showOff = function (phone) {\r\n    var message = 'Hey friend, I have a new ' +\r\n                phone.color + ' ' + phone.brand + ' phone';\r\n\r\n    return Promise.resolve(message);\r\n};\r\nLet's chain the promises. You, the kid can only start the showOff promise after the willIGetNewPhone promise.\r\n\r\n...\r\n\r\n// call our promise\r\nvar askMom = function () {\r\n    willIGetNewPhone\r\n    .then(showOff) // chain it here\r\n    .then(function (fulfilled) {\r\n            console.log(fulfilled);\r\n         // output: 'Hey friend, I have a new black Samsung phone.'\r\n        })\r\n        .catch(function (error) {\r\n            // oops, mom don't buy it\r\n            console.log(error.message);\r\n         // output: 'mom is not happy'\r\n        });\r\n};\r\nThat's how easy to chain the promise.\r\n\r\n# Promises are Asynchronous\r\n\r\nPromises are asynchronous. Let's log a message before and after we call the promise.\r\n\r\n// call our promise\r\nvar askMom = function () {\r\n    console.log('before asking Mom'); // log before\r\n    willIGetNewPhone\r\n        .then(showOff)\r\n        .then(function (fulfilled) {\r\n            console.log(fulfilled);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error.message);\r\n        });\r\n    console.log('after asking mom'); // log after\r\n}\r\nWhat is the sequence of expected output? Probably you expect:\r\n\r\n1. before asking Mom\r\n2. Hey friend, I have a new black Samsung phone.\r\n3. after asking mom\r\nHowever, the actual output sequence is:\r\n\r\n\r\n1. before asking Mom\r\n2. after asking mom\r\n3. Hey friend, I have a new black Samsung phone.\r\nOutput\r\n\r\nWhy? Because life (or JS) waits for no man.\r\n\r\nYou, the kid, wouldn't stop playing while waiting for your mom promise (the new phone). Don't you? That's something we call asynchronous, the code will run without blocking or waiting for the result. Anything that need to wait for promise to proceed, you put that in .then.\r\n\r\n# Promises in ES5, ES6/2015, ES7/Next\r\n\r\nES5 - Majority browsers\r\n\r\nThe demo code is workable in ES5 environments (all major browsers + NodeJs) if you include Bluebird promise library. It's because ES5 doesn't support promises out of the box. Another famous promise library is Q by Kris Kowal.\r\n\r\nES6 / ES2015 - Modern browsers, NodeJs v6\r\n\r\nThe demo code works out of the box because ES6 supports promises natively. In addition, with ES6 functions, we can further simplify the code with fat arrow => and use const and let.\r\n\r\nHere is an example of ES6 code:\r\n\r\n/* ES6 */\r\nconst isMomHappy = true;\r\n\r\n// Promise\r\nconst willIGetNewPhone = new Promise(\r\n    (resolve, reject) => { // fat arrow\r\n        if (isMomHappy) {\r\n            const phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone);\r\n        } else {\r\n            const reason = new Error('mom is not happy');\r\n            reject(reason);\r\n        }\r\n\r\n    }\r\n);\r\n\r\nconst showOff = function (phone) {\r\n    const message = 'Hey friend, I have a new ' +\r\n                phone.color + ' ' + phone.brand + ' phone';\r\n    return Promise.resolve(message);\r\n};\r\n\r\n// call our promise\r\nconst askMom = function () {\r\n    willIGetNewPhone\r\n        .then(showOff)\r\n        .then(fulfilled => console.log(fulfilled)) // fat arrow\r\n        .catch(error => console.log(error.message)); // fat arrow\r\n};\r\n\r\naskMom();\r\nNotes that all the var are replaced with const. All the function(resolve, reject) has been simplified to (resolve, reject) =>. There are a few benefits come with these changes. Read more on:-\r\n\r\nJavaScript ES6 Variable Declarations with let and const\r\nAn introduction to Javascript ES6 arrow functions\r\nES7 - Async Await make the syntax look prettier\r\n\r\nES7 introduce async and await syntax. It makes the asynchronous syntax look prettier and easier to understand, without the .then and .catch.\r\n\r\nRewrite our example with ES7 syntax.\r\n\r\n/* ES7 */\r\nconst isMomHappy = true;\r\n\r\n// Promise\r\nconst willIGetNewPhone = new Promise(\r\n    (resolve, reject) => {\r\n        if (isMomHappy) {\r\n            const phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone);\r\n        } else {\r\n            const reason = new Error('mom is not happy');\r\n            reject(reason);\r\n        }\r\n\r\n    }\r\n);\r\n\r\n// 2nd promise\r\nasync function showOff(phone) {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            var message = 'Hey friend, I have a new ' +\r\n                phone.color + ' ' + phone.brand + ' phone';\r\n\r\n            resolve(message);\r\n        }\r\n    );\r\n};\r\n\r\n// call our promise\r\nasync function askMom() {\r\n    try {\r\n        console.log('before asking Mom');\r\n\r\n        let phone = await willIGetNewPhone;\r\n        let message = await showOff(phone);\r\n\r\n        console.log(message);\r\n        console.log('after asking mom');\r\n    }\r\n    catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\n\r\n(async () => {\r\n    await askMom();\r\n})();\r\nWhenever you need to return a promise in a function, you prepend async to that function. E.g. async function showOff(phone)\r\nWhenever you need to call a promise, you prepend with await. E.g. let phone = await willIGetNewPhone; and let message = await showOff(phone);.\r\nUse try { ... } catch(error) { ... } to catch promise error, the rejected promise.\r\n# Why Promises and When to Use Them?\r\n\r\nWhy do we need promises? How's the world look like before promise? Before answering these questions, let's go back to the fundamental.\r\n\r\nNormal Function vs Async Function\r\n\r\nLet's take a look at these two example, both example perform addition of two number, one add using normal function, the other add remotely.\r\n\r\nNormal Function to Add Two Numbers\r\n\r\n// add two numbers normally\r\n\r\nfunction add (num1, num2) {\r\n    return num1 + num2;\r\n}\r\n\r\nconst result = add(1, 2); // you get result = 3 immediately\r\nAsync Function to Add Two numbers\r\n\r\n\r\n// add two numbers remotely\r\n\r\n// get the result by calling an API\r\nconst result = getAddResultFromServer('http://www.example.com?num1=1&num2=2');\r\n// you get result  = \"undefined\"\r\nIf you add the numbers with normal function, you get the result immediately. However when you issue a remote call to get result, you need to wait, you can't get the result immediately.\r\n\r\nOr put it this way, you don't know if you will get the result because the server might be down, slow in response, etc. You don't want your entire process to be blocked while waiting for the result.\r\n\r\nCalling APIs, downloading files, reading files are among some of the usual async operations that you'll perform.\r\n\r\nWorld Before Promises: Callback\r\n\r\nMust we use promise for asynchronous call? Nope. Prior to Promise, we use callback. Callback is just a function you call when you get the return result. Let's modify the previous example to accept a callback.\r\n\r\n// add two numbers remotely\r\n// get the result by calling an API\r\n\r\nfunction addAsync (num1, num2, callback) {\r\n    // use the famous jQuery getJSON callback API\r\n    return $.getJSON('http://www.example.com', {\r\n        num1: num1,\r\n        num2: num2\r\n    }, callback);\r\n}\r\n\r\naddAsync(1, 2, success => {\r\n    // callback\r\n    const result = success; // you get result = 3 here\r\n});\r\nThe syntax looks ok, why do we need promises then?\r\n\r\nWhat if You Want to Perform Subsequent Async Action?\r\n\r\nLet's say, instead of just add the numbers one time, we want to add 3 times. In a normal function, we do this:-\r\n\r\n// add two numbers normally\r\n\r\nlet resultA, resultB, resultC;\r\n\r\n function add (num1, num2) {\r\n    return num1 + num2;\r\n}\r\n\r\nresultA = add(1, 2); // you get resultA = 3 immediately\r\nresultB = add(resultA, 3); // you get resultB = 6 immediately\r\nresultC = add(resultB, 4); // you get resultC = 10 immediately\r\n\r\nconsole.log('total' + resultC);\r\nconsole.log(resultA, resultB, resultC);\r\nHow it looks like with callbacks?\r\n\r\n// add two numbers remotely\r\n// get the result by calling an API\r\n\r\nlet resultA, resultB, resultC;\r\n\r\nfunction addAsync (num1, num2, callback) {\r\n    // use the famous jQuery getJSON callback API\r\n    return $.getJSON('http://www.example.com', {\r\n        num1: num1,\r\n        num2: num2\r\n    }, callback);\r\n}\r\n\r\naddAsync(1, 2, success => {\r\n    // callback 1\r\n    resultA = success; // you get result = 3 here\r\n\r\n    addAsync(resultA, 3, success => {\r\n        // callback 2\r\n        resultB = success; // you get result = 6 here\r\n\r\n        addAsync(resultB, 4, success => {\r\n            // callback 3\r\n            resultC = success; // you get result = 10 here\r\n\r\n            console.log('total' + resultC);\r\n            console.log(resultA, resultB, resultC);\r\n        });\r\n    });\r\n});\r\nDemo: https://jsbin.com/barimo/edit?html,js,console\r\n\r\nThe syntax is less user friendly. In a nicer term, It looks like a pyramid, but people usually refer this as \"callback hell\", because the callback nested into another callback. Imagine you have 10 callbacks, your code will nested 10 times!\r\n\r\nEscape From Callback Hell\r\n\r\nPromises come in to rescue. Let's look at the promise version of the same example.\r\n\r\n\r\n// add two numbers remotely using observable\r\n\r\nlet resultA, resultB, resultC;\r\n\r\nfunction addAsync(num1, num2) {\r\n    // use ES6 fetch API, which return a promise\r\n    return fetch(`http://www.example.com?num1=${num1}&num2=${num2}`)\r\n        .then(x => x.json());\r\n}\r\n\r\naddAsync(1, 2)\r\n    .then(success => {\r\n        resultA = success;\r\n        return resultA;\r\n    })\r\n    .then(success => addAsync(success, 3))\r\n    .then(success => {\r\n        resultB = success;\r\n        return resultB;\r\n    })\r\n    .then(success => addAsync(success, 4))\r\n    .then(success => {\r\n        resultC = success;\r\n        return resultC;\r\n    })\r\n    .then(success => {\r\n        console.log('total: ' + success)\r\n        console.log(resultA, resultB, resultC)\r\n    });\r\nDemo: https://jsbin.com/qafane/edit?js,console\r\n\r\nWith promises, we flatten the callback with .then. In a way, it looks cleaner because of no callback nesting. Of course, with ES7 async syntax, we can even further enhance this example, but I leave that to you. :)\r\n\r\n# New Kid On the Block: Observables\r\n\r\nBefore you settle down with promises, there is something that has come about to make it even easier to deal with async data called Observables.\r\n\r\nObservables are lazy event streams which can emit zero or more events, and may or may not finish.\r\n\r\nsource\r\nSome key differences between promises and observable are:\r\n\r\nObservables are cancellable\r\nObservable are lazy\r\nFear not, let look at the same demo written with Observables. In this example, I am using RxJS for the observables.\r\n\r\nlet Observable = Rx.Observable;\r\nlet resultA, resultB, resultC;\r\n\r\nfunction addAsync(num1, num2) {\r\n    // use ES6 fetch API, which return a promise\r\n    const promise = fetch(`http://www.example.com?num1=${num1}&num2=${num2}`)\r\n        .then(x => x.json());\r\n\r\n    return Observable.fromPromise(promise);\r\n}\r\n\r\naddAsync(1,2)\r\n  .do(x => resultA = x)\r\n  .flatMap(x => addAsync(x, 3))\r\n  .do(x => resultB = x)\r\n  .flatMap(x => addAsync(x, 4))\r\n  .do(x => resultC = x)\r\n  .subscribe(x => {\r\n    console.log('total: ' + x)\r\n    console.log(resultA, resultB, resultC)\r\n  });\r\nDemo: https://jsbin.com/dosaviwalu/edit?js,console\r\n\r\nNotes:\r\n\r\nObservable.fromPromise converts a promise to observable stream.\r\n.do and .flatMap are among some of the operators available for Observables\r\nStreams are lazy. Our addAsync runs when we .subscribe to it.\r\nObservables can do more funky stuff easily. For example, delay add function by 3 seconds with just one line of code or retry so you can retry a call a certain number of times.\r\n\r\n...\r\n\r\naddAsync(1,2)\r\n  .delay(3000) // delay 3 seconds\r\n  .do(x => resultA = x)\r\n  ...\r\nWell, let's talk about Observables in future post!\r\n\r\n# Summary\r\n\r\nGet yourself familiar with callbacks and promises. Understand them and use them. Don't worry about Observables, just yet. All three can factor into your development depending on the situation.\r\n\r\nHere are the demo code for all mom promise to buy phone examples:\r\n\r\nDemo (ES5): https://jsbin.com/habuwuyeqo/edit?html,js,console\r\nDemo (ES6): https://jsbin.com/cezedu/edit?js,console\r\nDemo (ES7): https://goo.gl/U3fPmh\r\nGithub example (ES7): https://github.com/chybie/js-async-await-promise\r\nThat's it. Hopefully this article smoothen your path to tame the JavaScript promises. Happy coding!",
    "description": "Article Written by Jocylen Yeen\r\n\r\nJavascript Promises are not difficult. However, lots of people find it a little bit hard to understand at the beginning. Therefore, I would like to write down the wa"
  },
  {
    "id": 1510802860438,
    "title": "10 CSS Tricks Every Developer Should Know",
    "image": "https:&#x2F;&#x2F;www.infragistics.com&#x2F;community&#x2F;cfs-filesystemfile.ashx&#x2F;__key&#x2F;CommunityServer.Blogs.Components.WeblogFiles&#x2F;brent_5F00_schooley.metablogapi&#x2F;8765.css_2D00_tricks_5F00_03149516.png",
    "body": "1. ABSOLUTE POSITIONING\r\nIf you want control over where an element lives on our website at all times, absolute positioning is the key to making this happen. If you think of your browser as one big bounding box, absolute positioning allows you to control exactly where in that box an element will stay. Use top, right, bottom and left, accompanied by a pixel value to control where an element stays.\r\nposition:absolute;\r\ntop:20px;\r\nright:20px\r\nThe CSS above sets the position of an element to stay 20px from the top and right edges of your browser. You can also use absolute positioning inside of a div.\r\n \r\n2. * + SELECTOR\r\nThe * enables you to select all elements of a particular selector. For example, if you used *p and then added CSS styles to that, it would do it to all elements in your document with a <p> tag. This makes it easy to target parts of your website globally.\r\n \r\n3. OVERRIDING ALL STYLES\r\nThis should be used sparingly, because if you do this for everything, you’re going to find yourself in trouble in the long run. However, if you want to override another CSS style for a specific element, use !important after the style in your css. For example, if I wanted the H2 headers in a specific section of my site to be red instead of blue, I would use the following CSS:\r\n.section h2 { color:red !important; }\r\n \r\n4. CENTERING\r\nCentering is tricky, because it depends on what you’re trying to center. Let’s take a look at the CSS of items to be centered, based on content.\r\nTEXT\r\nText is centered using the text-align:center;. If you want it to either side, use left or right instead of center.\r\nCONTENT\r\nA div (or any other element) can be centered by adding the block property to it, and then using auto margins. The CSS would look like this:\r\n#div1 {\r\n    display: block;\r\n    margin: auto;\r\n    width: anything under 100% \r\n}\r\nThe reason I put “anything under 100%” for width is because if it was 100% wide, then if would be full-width and wouldn’t need centering. It is best to have a fixed width, like 60% or 550px, etc.\r\n \r\n5. VERTICAL ALIGNMENT (FOR ONE LINE OF TEXT)\r\nYou will use this in a CSS navigation menu, I can almost guarantee that. The key is to make the height of the menu and the line-height of the text the same. I see this technique a lot when I go back and edit existing websites for clients. Here’s an example:\r\n.nav li{\r\n    line-height:50px;\r\n    height:50px;\r\n}\r\n \r\n6. HOVER EFFECTS\r\nThis is used for buttons, text links, bock sections of your site, icons, and more. If you want something to change colors when someone hovers their mouse over it, use the same CSS, but add :hover to it and change the styling. Here’s an example:\r\n.entry h2{\r\n    font-size:36px;\r\n    color:#000;\r\n    font-weight:800;\r\n}\r\n\r\n.entry h2:hover{\r\n    color:#f00;\r\n}\r\nWhat this does is it changes the color of your h2 tag from black to red when someone hovers over it. The great thing about using :hover is that you don’t have to declare the font-size or weight again, if it isn’t changing. It only changes what you specify.\r\nTRANSITION\r\nFor hover effects, like with menus or on images in your website, you don’t want colors snapping too quickly to the end result. You ideally want to ease the change in gradually, which is where the transition property comes into play.\r\n.entry h2:hover{\r\n    color:#f00;\r\n    transition: all 0.3s ease;\r\n}\r\nThis makes the change happen over .3 seconds, instead of just instantly snapping to red. This makes the hover effect more pleasing to the eye and less jarring.\r\n \r\n7. LINK STATES\r\nThese styles are missed by a lot of designers, and it really causes usability issues with your visitors. The :link pseudo-class controls all links that haven’t been clicked on yet. The :visited pseudo class handles the styling of all of the links you’ve already visited. This tells website visitors where they have already been on your site, and where they have yet to explore.\r\na:link { color: blue; }\r\na:visited { color: purple; }\r\n \r\n8. EASILY RESIZE IMAGES TO FIT\r\nSometimes you get in a pinch where images need to fit a certain width, while scaling proportionally. An easy way to do this is to use max width to handle this. Here is an example:\r\nimg {\r\n    max-width:100%;\r\n    height:auto;\r\n}\r\nThis means that the largest the image could ever be is 100%, and the height is automatically calculated, based on the image width. In some cases, you might have to also have to specify the width at 100%.\r\n \r\n9. CONTROL THE ELEMENTS OF A SECTION\r\nUsing the image example above, if you only want to target the images of a certain section, like your blog, use a class for the blog section, and combine it with the actual selector. This will enable you to select only the images of the blog section, and not other images, such as your logo, or social meia icons, or images in any other sections of your site, like the sidebar. Here’s how the CSS would look:\r\n.blog img{\r\n    max-width:100%;\r\n    height:auto;\r\n}\r\n\r\n \r\n10. DIRECT CHILDREN\r\nI wish I’d known this when I first started out using CSS. This would have saved me so much time! Use > to select the direct children of an element. For example:\r\n\r\n#footer > a\r\nThis will select and style all of the active link elements that are immediately under the Footer ID. It won’t select anything past the active element, or anything else contained in the footer, like plain text. This works great with top level navigation elements, too.\r\nSPECIFIC CHILD ELEMENTS\r\nBelieve me, this is handy when you are styling lists. You just need to count how many items down the element is that you want to style and then apply that style.\r\nli:nth-child(2) {\r\n    font-weight:800;\r\n    color: blue;\r\n    text-style:underline;\r\n}\r\nThe CSS above targets the second item in the list and makes it bold, underlined, and blue. Add an “n” after the number in parenthesis and you can target every 2nd list item. Imagine being able to style every other line in a table-style layout for easy reading. The CSS would be:\r\nli:nth-child(2)",
    "description": "1. ABSOLUTE POSITIONING\r\nIf you want control over where an element lives on our website at all times, absolute positioning is the key to making this happen. If you think of your browser as one big bou"
  },
  {
    "id": 1510803240981,
    "title": "Coding for beginners",
    "image": "https:&#x2F;&#x2F;unsplash.it&#x2F;960&#x2F;504",
    "body": "Code all day Every day!",
    "description": "Code all day Every day!"
  }
]
